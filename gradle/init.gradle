allprojects{
    ext {   
        jvm_version                     = 1.6
        junit_version                   = '4.12'
        spring_version                  = '4.2.7.RELEASE'
        spring_boot_version             = '1.2.8.RELEASE'//1.3.5 jdk7
        hibernate_version               = '5.1.0.Final'//5.2+ requires jdk1.8
        hibernate_validator_version     = '5.2.4.Final'
        jackson_version                 = '2.4.6'
        log4j2_version                  = '2.3'//2.4+ requires jdk1.7
        httpclient_version              = '4.5.2'
        quartz_version                  = '2.2.1'
        cglib_version                   = '3.2.2'
        dubbo_version                   = '2.5.3'
        zookeeper_version               = '3.4.8'
        zkclient_version                = '0.9'
        javassist_version               = '3.20.0-GA'
        netty_version                   = '3.2.10.Final'
        kryo_version                    = '3.0.3'
        tomcat_version                  = '7.0.59'
        local_libs                      = 'c:/www/pengh/libs'
        release_dir                     = 'c:/users/pengh/desktop/release'
    }

    repositories {
        //maven.oschina.net已经不可用，使用mavenCentral就好，实在嫌下载慢，可使用vpn
        /*def REPOSITORY_URL = 'http://maven.oschina.net/content/groups/public'
        all { ArtifactRepository repo ->
            if(repo instanceof MavenArtifactRepository){
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle "Repository ${repo.url} replaced by $REPOSITORY_URL."
                    remove repo
                }
            }
        }
        maven {
            url REPOSITORY_URL
        }*/
        mavenCentral()
    }


    

    task dirs << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() } 
        //for web app --> src/main/webapp
        webAppDir.mkdirs()
    }
    //上传到指定目录
    task up(type: Copy) { 
        from "${project.buildDir}/libs"
        into "$release_dir"
        include "${project.name}-${project.version}.*ar"
    }

    task del(type: Delete) { 
        delete ".classpath",".project",".settings"
    }
}