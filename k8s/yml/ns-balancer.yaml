# load balancer
#
apiVersion: v1
kind: Namespace
metadata:         
    name: k8s-balancer



---
apiVersion: v1
kind: ConfigMap
metadata:
    namespace: k8s-balancer
    name: nginx.cm
data:
    nginx.conf: |-
    user  nginx;

    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;

    pid        /var/run/nginx.pid;

    events {
        use   epoll;
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        types_hash_max_size 2048;
        server_names_hash_bucket_size 64;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        gzip  on;
        gzip_min_length  1000;
        gzip_buffers     4 8k;
        gzip_http_version 1.1;
        gzip_disable    "MSIE 6";
        gzip_proxied    any;
        gzip_types      text/plain application/xml text/css text/js text/xml application/x-javascript text/javascript application/javascript  application/json application/xml+rss image/jpeg image/png;


        ## request buffer 

        client_header_buffer_size    128k;
        large_client_header_buffers  4 128k;
        client_max_body_size 5m;


        #include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;


        upstream k8s {
            sevver 192.168.8.121:6443
            sevver 192.168.8.122:6443
            sevver 192.168.8.123:6443
        }


        ## add servers 

        server {
            listen       6443;
            listen  [::]:6443;
            server_name  192.168.8.120;
            real_ip_header X-Real-IP;
            
            location / {
                proxy_pass http://k8s;
            }

            location ~ /.ht {
                deny all;
            }
        }

    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
    namespace: k8s-balancer
    name: nginx-k8s-balancer 
    labels: 
        app: nginx 
spec:           
    replicas: 3    
    selector:      
        matchLabels:  
            app: nginx
    template:     #这是选择或创建的Pod的模板
        metadata:   #Pod的元数据
            labels:   #Pod的标签，上面的selector即选择包含标签app:nginx的Pod
                app: nginx
        spec:       #期望Pod实现的功能（即在pod中部署）
            containers:   #生成container，与docker中的container是同一种
                -   name: nginx #container的名称
                    image: nginx:1.18-alpine  #使用镜像nginx:1.18创建container，该container默认80端口可访问
                    imagePullPolicy: IfNotPresent #先本地，若无再下载
                    ports:
                        -   name: http
                            containerPort: 80
                        -   name: http2
                            containerPort: 443
                    volumeMounts:
                        -   mountPath: /etc/nginx/nginx.conf
                            name: nginx-config # 使用下面的配置覆盖默认配置
                            subPath: nginx.conf
                    resources:
                        limits:
                            cpu: 50m  
                            memory: 512Mi  
                        requests:
                            cpu: 25m
                            memory: 256Mi
            volumes:
                -   name: nginx-config
                    configMap:
                        name: nginx.cm

---
apiVersion: v1
kind: Service
metadata:
    namespace: k8s-balancer
    name: nginx-k8s-balancer-service  
    labels:        
        app: nginx   
spec:        
    selector:      
        app: nginx   
    ports:
        -   name: http-nginx    
            protocol: TCP        
            port: 80            #Svc 的端口
            targetPort: 80      #Pod 的端口
        -   name: http2-nginx    
            protocol: TCP        
            port: 443            #Svc 的端口
            targetPort: 443      #Pod 的端口
    type: ClusterIP

#
# useage
# 
# kubectl delete ns k8s-balancer
# kubectl create -f ns-balancer.yaml
#
# kubectl describe limitrange/limit-mem-cpu-per-pod -n k8s-balancer
#
# kubectl get resourcequota mem-cpu -n k8s-balancer -o yaml

# kubectl describe nodes k8s-m1

# kubectl describe svc/nginx-k8s-balancer-service     


# kubectl get pod -A -o wide
#
# kubectl run -n k8s-balancer busybox-test --rm -ti --image busybox --requests 'cpu=100m,memory=512Mi' --limits 'cpu=200m,memory=512Mi' -- /bin/sh 
# wget -q --timeout=5 nginx-demo-deployment -O -
# wget -q -T 2 -O - nginx-demo-deployment 
# wget -q -T 2 -O - 172.16.1.153:443

