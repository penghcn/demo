# 开发空间，核心应用区
#
apiVersion: v1
kind: Namespace
metadata:         
    name: ns-dev-core

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:         
    namespace: ns-dev-core
    name: default-deny2
spec:            
    podSelector: 
        matchLabels: {}
    policyTypes:
        - Ingress
        - Egress
    ingress: # 入白名单，以下任一
        -   from:
                -   namespaceSelector:
                        matchLabels: 
                            project: myproject
                -   podSelector:
                        matchLabels:
                            app: tomcat
                -   ipBlock:
                        cidr: 172.16.0.0/16
                        except:
                            - 172.16.1.0/24
            ports:
                -   protocol: TCP
                    port: 80
        -   from:
                -   namespaceSelector:
                        matchLabels: 
                            project: db
                -   podSelector:
                        matchLabels:
                            role: frontend
                -   ipBlock:
                        cidr: 172.16.0.0/16
                        except:
                            - 172.16.3.0/24
            ports:
                -   protocol: TCP
                    port: 443

    egress:
        - {} # 出白名单，允许所有

---
apiVersion: v1
kind: ResourceQuota
metadata:
    namespace: ns-dev-core 
    name: mem-cpu
spec:
    hard:
        requests.cpu: 1200m
        requests.memory: 3Gi
        limits.cpu: "2"
        limits.memory: 4Gi

---
apiVersion: v1
kind: LimitRange
metadata:
    namespace: ns-dev-core 
    name: limit-mem-cpu-per-pod
spec:
    limits:
        -   max:
                cpu: "2"
                memory: "4Gi"
            type: Pod

---
apiVersion: v1
kind: ConfigMap
metadata:
    namespace: ns-dev-core 
    name: nginx.cm
data:
    nginx.conf: "user  nginx;\n\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log
    warn;\n\npid        /var/run/nginx.pid;\n\nevents {\n\n    use   epoll;\n\n    worker_connections
    \ 1024;\n\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type
    \ application/octet-stream;\n    types_hash_max_size 2048;\n    server_names_hash_bucket_size
    64;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\"
    '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\"
    \"$http_x_forwarded_for\"';\n\n\n    access_log  /var/log/nginx/access.log  main;\n\n\n
    \   sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n
    \   gzip  on;\n    gzip_min_length  1000;\n    gzip_buffers     4 8k;\n    gzip_http_version
    1.1;\n    gzip_disable    \"MSIE 6\";\n    gzip_proxied    any;\n    gzip_types
    \     text/plain application/xml text/css text/js text/xml application/x-javascript
    text/javascript application/javascript  application/json application/xml+rss image/jpeg
    image/png;\n\n\n    ## request buffer \n\n    client_header_buffer_size    128k;\n
    \   large_client_header_buffers  4 128k;\n    client_max_body_size 5m;\n\n\n    include
    /etc/nginx/sites-enabled/*;\n\n\n    ## add servers \n\n    server {\n        listen
    \      80;\n        listen  [::]:80;\n        server_name  localhost;\n        root
    /var/www/test/;\n        index index.htm;    \n        \n        real_ip_header
    X-Real-IP;\n        \n        error_page   500 502 503 504 /50x.html;\n        location
    /50x.html {\n            #\n        }\n\n        location ~ /.ht {\n            deny
    all;\n        }\n    }\n\n    server {\n        listen       443;\n        listen
    \ [::]:443;\n        server_name  localhost;\n\troot /var/www/test/;\n\tindex
    index.htm;    \n}\n\n}\n\n"

---
apiVersion: apps/v1
kind: Deployment
metadata:
    namespace: ns-dev-core 
    name: nginx-demo-deployment 
    labels: 
        app: nginx 
spec:           
    replicas: 3    
    selector:      
        matchLabels:  
            app: nginx
    template:     #这是选择或创建的Pod的模板
        metadata:   #Pod的元数据
            labels:   #Pod的标签，上面的selector即选择包含标签app:nginx的Pod
                app: nginx
        spec:       #期望Pod实现的功能（即在pod中部署）
            containers:   #生成container，与docker中的container是同一种
                -   name: nginx #container的名称
                    image: nginx:1.18  #使用镜像nginx:1.18创建container，该container默认80端口可访问
                    imagePullPolicy: IfNotPresent #先本地，若无再下载
                    ports:
                        -   name: http
                            containerPort: 80
                        -   name: http2
                            containerPort: 443
                    volumeMounts:
                        -   mountPath: /etc/nginx/nginx.conf
                            name: nginx-config # 使用下面的配置覆盖默认配置
                            subPath: nginx.conf
                        -   mountPath: /var/www/test
                            name: nginx-data
                    resources:
                        limits:
                            cpu: 50m  
                            memory: 512Mi  
                        requests:
                            cpu: 25m
                            memory: 256Mi
            volumes:
                -   name: nginx-config
                    configMap:
                        name: nginx.cm
                -   name: nginx-data
                    hostPath:
                        path: /root/www

---
apiVersion: v1
kind: Service
metadata:
    namespace: ns-dev-core 
    name: nginx-demo-service   
    labels:        
        app: nginx   
spec:        
    selector:      
        app: nginx   
    ports:
        -   name: http-nginx    
            protocol: TCP        
            port: 80            #Svc 的端口
            targetPort: 80      #Pod 的端口
    type: ClusterIP

#
# useage
# 
# kubectl delete ns ns-dev-core
# kubectl create -f ns-dev-core.yaml
#
# kubectl describe limitrange/limit-mem-cpu-per-pod -n ns-dev-core
#
# kubectl get resourcequota mem-cpu -n ns-dev-core -o yaml

# kubectl describe nodes k8s-m1


# kubectl get pod -A -o wide
#
# kubectl run -n ns-dev-core busybox-test --rm -ti --image busybox --requests 'cpu=100m,memory=512Mi' --limits 'cpu=200m,memory=512Mi' -- /bin/sh 
# wget -q --timeout=5 nginx-demo-deployment -O -
# wget -q -T 2 -O - nginx-demo-deployment 
# wget -q -T 2 -O - 172.16.1.153:443

